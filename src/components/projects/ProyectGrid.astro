
---
import NextJs from "../brands/icons/NextJs.astro";
import React from "../brands/icons/React.astro";
import Tailwind from "../brands/icons/Tailwind.astro";
import Node from "../brands/icons/Node.astro";
import VSCode from "../brands/icons/VSCode.astro";
import Electron from "../brands/icons/Electron.astro";
import Proyect from "./Proyect.astro";
import PostgreSQL from "../brands/icons/PostgreSQL.astro";
import Django from "../brands/icons/Django.astro";
import JWT from "../brands/icons/JWT.astro";
import MySQL from "../brands/icons/MySQL.astro";
import Prisma from "../brands/icons/Prisma.astro";
import TipTap from "../brands/icons/TipTap.astro";
import Express from "../brands/icons/Express.astro";
import Zustand from "../brands/icons/Zustand.astro";
import Figma from "../brands/icons/Figma.astro";
import Linux from "../brands/icons/Linux.astro";
import AstroIcon from "../brands/icons/AstroIcon.astro";
import Css from "../brands/icons/Css.astro";
import Git from "../brands/icons/Git.astro";
import Html from "../brands/icons/Html.astro";
import Javascript from "../brands/icons/Javascript.astro";
import Python from "../brands/icons/Python.astro";
import Typescript from "../brands/icons/Typescript.astro";
import Expo from "../brands/icons/Expo.astro";
import Github from "../brands/icons/Github.astro";
import Supabase from "../brands/icons/Supabase.astro";

export const tags = {
  VSCode: {title: "VSCode",
  icon: VSCode,
},

Python: {title: "Python",
  icon: Python,
},

Node: {
  title: "Node.js",
  icon: Node,
},

Figma: {
  title: "Figma",
  icon: Figma,
},

Javascript: {
  title: "Javascript",
  icon: Javascript,
},

Typescript: {
  title: "Typescript",
  icon: Typescript,
},

HTML: {
  title: "HTML",
  icon: Html,
},

CSS: {
  title: "CSS",
  icon: Css,
},

Git: {
  title: "Git",
  icon: Git,
},

Linux: {
  title: "Linux",
  icon: Linux,
},

Astro: {
  title: "Astro",
  icon: AstroIcon,
},

 NextJs: {title: "Next.js",
  icon: NextJs,
},

React: {title: "React",
  icon: React,
},

Tailwind: {title: "Tailwind",
  icon: Tailwind,
},

Electron: {title: "Electron",
  icon: Electron,
},

Django: {
    title: "Django",
    icon: Django,
},

JWT: {
    title: "JWT",
    icon: JWT,
},

PostgreSQL: {
    title: "PostgreSQL",
    icon: PostgreSQL,   
},

MySQL: {
    title: "MySQL",
    icon: MySQL,
},

Prisma: {
    title: "Prisma",
    icon: Prisma,
},

TipTap: {
    title: "TipTap",
    icon: TipTap,
},

Express: {
    title: "Express",
    icon: Express,
},

Zustand: {
    title: "Zustand",
    icon: Zustand,
},

Expo: {
    title: "Expo", 
    icon: Expo,
},

Supabase: {
    title: "Supabase",
    icon: Supabase,
},

Github: {
    title: "Github",
    icon: Github,
}

}

const proyects = [
    {
        title: "Weathify",
        description: "Aplicaci칩n de escritorio que cambia el fondo de pantalla dependiendo del clima local. Totalmente perzonalizable.",
        image: "/logo.png",
        tags: [tags.React, tags.Tailwind, tags.Electron, tags.Node ],
        href: "https://github.com/ezwal/Weathify"
    },
    {
        title: "Luxure",
        description: "Pagina de hoteles con un dise침o moderno y una interfaz de usuario atractiva. Con una API REST con autenticaci칩n JWT.",
        image: "/Luxure.png",
        href: "https://luxure.netlify.app/",
        tags: [tags.React, tags.Tailwind, tags.Django, tags.MySQL, tags.JWT],
    },
    {
        title: "iCloud Notes Clone",
        description: "Clon hecho completamente desde cero de una de las famosas aplicaciones de iCloud.",
        image: "/notes.png",
        href: "https://noteios.vercel.app/",
        tags: [tags.NextJs, tags.Prisma, tags.PostgreSQL, tags.TipTap, tags.Tailwind],
    },
      {
        title: "Creaciones Laura",
        description: "Aplicacion de reposteria para creaciones de artistas. Con REST API y con un dise침o moderno.",
        image: "/donut.gif",
        href: "https://noteios.vercel.app/",
        tags: [tags.NextJs, tags.Prisma, tags.PostgreSQL, tags.Express, tags.Zustand, tags.Tailwind, tags.Node],
    },
    
];
---

<div class="flex flex-col lg:grid lg:grid-cols-3 gap-8 w-full">
   <Proyect size='icon' class='transition duration-500 ease show '  {...proyects[0]} />
    <Proyect size='screen' class='transition duration-500 ease show lg:col-span-2' {...proyects[1]} />
    <Proyect size='screen' class='transition duration-500 ease show lg:col-span-2' {...proyects[2]} />
    <Proyect size="icon" class='transition duration-500 ease show' {...proyects[3]} />
</div>

<script>

  const observer = new IntersectionObserver((entries) => {
    entries.forEach((entry) => {
      if (entry.isIntersecting) {
        entry.target.classList.remove('opacity-0');
        entry.target.classList.remove('translate-y-[50%]');
        entry.target.classList.add('opacity-100');
        entry.target.classList.add('translate-y-0');
        
      } else {
        entry.target.classList.remove('translate-y-0');
        entry.target.classList.remove('opacity-100');
        entry.target.classList.add('opacity-0'); 
        entry.target.classList.add('translate-y-[50%]');

      }
    });
  });

  const proyects = document.querySelectorAll('.show');
  
  proyects.forEach((proyect) => {
    observer.observe(proyect);
  });

</script>

